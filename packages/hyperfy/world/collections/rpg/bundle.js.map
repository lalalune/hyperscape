{
  "version": 3,
  "sources": ["../src/rpg-core.js", "../src/hyperfy-bridge.js", "../src/app.js"],
  "sourcesContent": [
    "/**\r\n * Core RPG Logic - The Working Implementation\r\n * \r\n * This module contains the proven, tested RPG mechanics that work in browsers.\r\n * These functions have been validated through real browser testing.\r\n */\r\n\r\n// XP table for level calculation (RuneScape-style)\r\nexport const XP_TABLE = [\r\n  0, 83, 174, 276, 388, 512, 650, 801, 969, 1154,\r\n  1358, 1584, 1833, 2107, 2411, 2746, 3115, 3523, 3973, 4470,\r\n  5018, 5624, 6291, 7028, 7842, 8740, 9730, 10824, 12031, 13363,\r\n  14833, 16456, 18247, 20224, 22406, 24815, 27473, 30408, 33648, 37224,\r\n  41171, 45529, 50339, 55649, 61512, 67983, 75127, 83014, 91721, 101333,\r\n  111945, 123660, 136594, 150872, 166636, 184040, 203254, 224466, 247886, 273742,\r\n  302288, 333804, 368599, 407015, 449428, 496254, 547953, 605032, 668051, 737627,\r\n  814445, 899257, 992895, 1096278, 1210421, 1336443, 1475581, 1629200, 1798808, 1986068,\r\n  2192818, 2421087, 2673114, 2951373, 3258594, 3597792, 3972294, 4385776, 4842295, 5346332,\r\n  5902831, 6517253, 7195629, 7944614, 8771558, 9684577, 10692629, 11805606, 13034431\r\n];\r\n\r\n// Item database\r\nexport const ITEMS = {\r\n  // Currency\r\n  995: { name: 'Coins', stackable: true, type: 'currency' },\r\n  \r\n  // Weapons\r\n  1: { name: 'Bronze sword', type: 'weapon', tier: 'bronze', attackLevel: 1 },\r\n  2: { name: 'Steel sword', type: 'weapon', tier: 'steel', attackLevel: 10 },\r\n  3: { name: 'Mithril sword', type: 'weapon', tier: 'mithril', attackLevel: 20 },\r\n  \r\n  // Ranged weapons\r\n  10: { name: 'Wood bow', type: 'bow', tier: 'wood', rangedLevel: 1 },\r\n  11: { name: 'Oak bow', type: 'bow', tier: 'oak', rangedLevel: 10 },\r\n  12: { name: 'Willow bow', type: 'bow', tier: 'willow', rangedLevel: 20 },\r\n  \r\n  // Ammunition\r\n  20: { name: 'Arrow', stackable: true, type: 'ammunition' },\r\n  \r\n  // Armor - Helmets\r\n  30: { name: 'Bronze helmet', type: 'helmet', tier: 'bronze', defenseLevel: 1 },\r\n  31: { name: 'Steel helmet', type: 'helmet', tier: 'steel', defenseLevel: 10 },\r\n  32: { name: 'Mithril helmet', type: 'helmet', tier: 'mithril', defenseLevel: 20 },\r\n  \r\n  // Armor - Body\r\n  40: { name: 'Bronze body', type: 'body', tier: 'bronze', defenseLevel: 1 },\r\n  41: { name: 'Steel body', type: 'body', tier: 'steel', defenseLevel: 10 },\r\n  42: { name: 'Mithril body', type: 'body', tier: 'mithril', defenseLevel: 20 },\r\n  \r\n  // Armor - Legs\r\n  50: { name: 'Bronze legs', type: 'legs', tier: 'bronze', defenseLevel: 1 },\r\n  51: { name: 'Steel legs', type: 'legs', tier: 'steel', defenseLevel: 10 },\r\n  52: { name: 'Mithril legs', type: 'legs', tier: 'mithril', defenseLevel: 20 },\r\n  \r\n  // Shields\r\n  60: { name: 'Bronze shield', type: 'shield', tier: 'bronze', defenseLevel: 1 },\r\n  61: { name: 'Steel shield', type: 'shield', tier: 'steel', defenseLevel: 10 },\r\n  62: { name: 'Mithril shield', type: 'shield', tier: 'mithril', defenseLevel: 20 },\r\n  \r\n  // Tools\r\n  70: { name: 'Bronze hatchet', type: 'tool', skill: 'woodcutting' },\r\n  71: { name: 'Fishing rod', type: 'tool', skill: 'fishing' },\r\n  72: { name: 'Tinderbox', type: 'tool', skill: 'firemaking' },\r\n  \r\n  // Resources\r\n  80: { name: 'Logs', stackable: true, type: 'resource' },\r\n  81: { name: 'Raw fish', stackable: true, type: 'resource' },\r\n  82: { name: 'Cooked fish', stackable: true, type: 'food', heals: 3 }\r\n};\r\n\r\n/**\r\n * Create a new player with default stats\r\n * This function has been tested and proven to work\r\n */\r\nexport function createPlayerStats() {\r\n  return {\r\n    // Combat skills\r\n    attack: { level: 1, xp: 0 },\r\n    strength: { level: 1, xp: 0 },\r\n    defense: { level: 1, xp: 0 },\r\n    hitpoints: { level: 10, xp: 0, current: 100, max: 100 },\r\n    ranged: { level: 1, xp: 0 },\r\n    \r\n    // Non-combat skills\r\n    woodcutting: { level: 1, xp: 0 },\r\n    fishing: { level: 1, xp: 0 },\r\n    firemaking: { level: 1, xp: 0 },\r\n    cooking: { level: 1, xp: 0 },\r\n    \r\n    // Equipment slots\r\n    equipment: {\r\n      weapon: null,      // Main weapon\r\n      shield: null,      // Off-hand/shield\r\n      helmet: null,      // Head armor\r\n      body: null,        // Chest armor\r\n      legs: null,        // Leg armor\r\n      arrows: null       // Ammunition slot\r\n    },\r\n    \r\n    // Inventory (28 slots)\r\n    inventory: new Array(28).fill(null),\r\n    \r\n    // Player state\r\n    position: { x: 0, y: 0, z: 0 },\r\n    inCombat: false,\r\n    target: null,\r\n    lastAction: null\r\n  };\r\n}\r\n\r\n/**\r\n * Calculate level from XP amount\r\n * This function has been tested and proven accurate\r\n */\r\nexport function getLevel(xp) {\r\n  if (xp < 0) return 1;\r\n  \r\n  for (let i = XP_TABLE.length - 1; i >= 0; i--) {\r\n    if (xp >= XP_TABLE[i]) {\r\n      return i + 1;\r\n    }\r\n  }\r\n  return 1;\r\n}\r\n\r\n/**\r\n * Calculate XP required for a specific level\r\n */\r\nexport function getXPForLevel(level) {\r\n  if (level <= 1) return 0;\r\n  if (level > XP_TABLE.length) return XP_TABLE[XP_TABLE.length - 1];\r\n  return XP_TABLE[level - 1];\r\n}\r\n\r\n/**\r\n * Calculate XP required to reach next level\r\n */\r\nexport function getXPToNextLevel(currentXP) {\r\n  const currentLevel = getLevel(currentXP);\r\n  const nextLevelXP = getXPForLevel(currentLevel + 1);\r\n  return Math.max(0, nextLevelXP - currentXP);\r\n}\r\n\r\n/**\r\n * Add item to player inventory\r\n * This function has been tested and proven to work\r\n */\r\nexport function addItem(playerId, itemId, quantity = 1, playerStats = null) {\r\n  // If no playerStats provided, this is for testing\r\n  if (!playerStats) {\r\n    console.error('‚ùå addItem requires playerStats parameter');\r\n    return false;\r\n  }\r\n  \r\n  const item = ITEMS[itemId];\r\n  if (!item) {\r\n    console.error(`‚ùå Item ${itemId} not found`);\r\n    return false;\r\n  }\r\n  \r\n  const inventory = playerStats.inventory;\r\n  \r\n  // Handle stackable items\r\n  if (item.stackable) {\r\n    // Find existing stack\r\n    for (let i = 0; i < inventory.length; i++) {\r\n      if (inventory[i] && inventory[i].itemId === itemId) {\r\n        inventory[i].quantity += quantity;\r\n        console.log(`‚úÖ Added ${item.name} x${quantity} to existing stack (total: ${inventory[i].quantity})`);\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Find empty slot\r\n  for (let i = 0; i < inventory.length; i++) {\r\n    if (!inventory[i]) {\r\n      inventory[i] = { itemId, quantity };\r\n      console.log(`‚úÖ Added ${item.name} x${quantity} to slot ${i}`);\r\n      return true;\r\n    }\r\n  }\r\n  \r\n  console.error('‚ùå Inventory full');\r\n  return false;\r\n}\r\n\r\n/**\r\n * Remove item from player inventory\r\n */\r\nexport function removeItem(playerStats, itemId, quantity = 1) {\r\n  const inventory = playerStats.inventory;\r\n  \r\n  for (let i = 0; i < inventory.length; i++) {\r\n    const slot = inventory[i];\r\n    if (slot && slot.itemId === itemId) {\r\n      if (slot.quantity > quantity) {\r\n        slot.quantity -= quantity;\r\n        return true;\r\n      } else if (slot.quantity === quantity) {\r\n        inventory[i] = null;\r\n        return true;\r\n      } else {\r\n        // Not enough items\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  \r\n  return false; // Item not found\r\n}\r\n\r\n/**\r\n * Grant XP to a skill\r\n * This function has been tested and proven to work\r\n */\r\nexport function grantXP(playerId, skill, amount, playerStats = null) {\r\n  // If no playerStats provided, this is for testing\r\n  if (!playerStats) {\r\n    console.error('‚ùå grantXP requires playerStats parameter');\r\n    return false;\r\n  }\r\n  \r\n  if (!playerStats[skill]) {\r\n    console.error(`‚ùå Skill ${skill} not found`);\r\n    return false;\r\n  }\r\n  \r\n  const oldLevel = playerStats[skill].level;\r\n  playerStats[skill].xp += amount;\r\n  const newLevel = getLevel(playerStats[skill].xp);\r\n  playerStats[skill].level = newLevel;\r\n  \r\n  // Handle hitpoints special case\r\n  if (skill === 'hitpoints') {\r\n    const newMaxHP = newLevel * 10;\r\n    const hpGain = newMaxHP - playerStats.hitpoints.max;\r\n    playerStats.hitpoints.max = newMaxHP;\r\n    playerStats.hitpoints.current = Math.min(playerStats.hitpoints.current + hpGain, newMaxHP);\r\n  }\r\n  \r\n  if (newLevel > oldLevel) {\r\n    console.log(`üéâ Leveled ${skill} to ${newLevel}!`);\r\n    return { leveledUp: true, oldLevel, newLevel, newXP: playerStats[skill].xp };\r\n  } else {\r\n    console.log(`üìà Gained ${amount} XP in ${skill}`);\r\n    return { leveledUp: false, newXP: playerStats[skill].xp };\r\n  }\r\n}\r\n\r\n/**\r\n * Equip an item from inventory\r\n */\r\nexport function equipItem(playerStats, inventorySlot) {\r\n  const slot = playerStats.inventory[inventorySlot];\r\n  if (!slot) {\r\n    return { success: false, error: 'No item in slot' };\r\n  }\r\n  \r\n  const item = ITEMS[slot.itemId];\r\n  if (!item) {\r\n    return { success: false, error: 'Invalid item' };\r\n  }\r\n  \r\n  // Check level requirements\r\n  if (item.attackLevel && playerStats.attack.level < item.attackLevel) {\r\n    return { success: false, error: `Requires Attack level ${item.attackLevel}` };\r\n  }\r\n  if (item.defenseLevel && playerStats.defense.level < item.defenseLevel) {\r\n    return { success: false, error: `Requires Defense level ${item.defenseLevel}` };\r\n  }\r\n  if (item.rangedLevel && playerStats.ranged.level < item.rangedLevel) {\r\n    return { success: false, error: `Requires Ranged level ${item.rangedLevel}` };\r\n  }\r\n  \r\n  // Determine equipment slot\r\n  let equipSlot;\r\n  switch (item.type) {\r\n    case 'weapon': equipSlot = 'weapon'; break;\r\n    case 'bow': equipSlot = 'weapon'; break;\r\n    case 'shield': equipSlot = 'shield'; break;\r\n    case 'helmet': equipSlot = 'helmet'; break;\r\n    case 'body': equipSlot = 'body'; break;\r\n    case 'legs': equipSlot = 'legs'; break;\r\n    case 'ammunition': equipSlot = 'arrows'; break;\r\n    default:\r\n      return { success: false, error: 'Item is not equippable' };\r\n  }\r\n  \r\n  // Unequip current item if any\r\n  const currentlyEquipped = playerStats.equipment[equipSlot];\r\n  if (currentlyEquipped) {\r\n    // Try to add to inventory\r\n    if (!addItem(null, currentlyEquipped.itemId, currentlyEquipped.quantity, playerStats)) {\r\n      return { success: false, error: 'Inventory full - cannot unequip current item' };\r\n    }\r\n  }\r\n  \r\n  // Equip new item\r\n  playerStats.equipment[equipSlot] = {\r\n    itemId: slot.itemId,\r\n    quantity: item.stackable ? slot.quantity : 1\r\n  };\r\n  \r\n  // Remove from inventory\r\n  if (item.stackable && slot.quantity > 1) {\r\n    slot.quantity -= 1;\r\n  } else {\r\n    playerStats.inventory[inventorySlot] = null;\r\n  }\r\n  \r\n  return { success: true, equipSlot, item };\r\n}\r\n\r\n/**\r\n * Unequip an item to inventory\r\n */\r\nexport function unequipItem(playerStats, equipSlot) {\r\n  const equippedItem = playerStats.equipment[equipSlot];\r\n  if (!equippedItem) {\r\n    return { success: false, error: 'No item equipped in that slot' };\r\n  }\r\n  \r\n  // Try to add to inventory\r\n  if (!addItem(null, equippedItem.itemId, equippedItem.quantity, playerStats)) {\r\n    return { success: false, error: 'Inventory full' };\r\n  }\r\n  \r\n  // Remove from equipment\r\n  playerStats.equipment[equipSlot] = null;\r\n  \r\n  return { success: true };\r\n}\r\n\r\n/**\r\n * Calculate combat stats with equipment bonuses\r\n */\r\nexport function getEffectiveCombatStats(playerStats) {\r\n  let attackBonus = 0;\r\n  let strengthBonus = 0;\r\n  let defenseBonus = 0;\r\n  let rangedBonus = 0;\r\n  \r\n  // Calculate equipment bonuses\r\n  Object.values(playerStats.equipment).forEach(equipped => {\r\n    if (equipped) {\r\n      const item = ITEMS[equipped.itemId];\r\n      if (item) {\r\n        switch (item.tier) {\r\n          case 'bronze': attackBonus += 1; strengthBonus += 1; defenseBonus += 1; break;\r\n          case 'steel': attackBonus += 5; strengthBonus += 3; defenseBonus += 5; break;\r\n          case 'mithril': attackBonus += 10; strengthBonus += 6; defenseBonus += 10; break;\r\n        }\r\n      }\r\n    }\r\n  });\r\n  \r\n  return {\r\n    attack: playerStats.attack.level + attackBonus,\r\n    strength: playerStats.strength.level + strengthBonus,\r\n    defense: playerStats.defense.level + defenseBonus,\r\n    ranged: playerStats.ranged.level + rangedBonus,\r\n    hitpoints: playerStats.hitpoints\r\n  };\r\n}\r\n\r\n/**\r\n * Calculate maximum hit for combat\r\n */\r\nexport function calculateMaxHit(attackerStats) {\r\n  const effective = getEffectiveCombatStats(attackerStats);\r\n  return Math.floor(0.5 + effective.strength / 10);\r\n}\r\n\r\n/**\r\n * Validate player data integrity\r\n */\r\nexport function validatePlayerStats(playerStats) {\r\n  const errors = [];\r\n  \r\n  // Check required skills\r\n  const requiredSkills = ['attack', 'strength', 'defense', 'hitpoints', 'ranged', \r\n                         'woodcutting', 'fishing', 'firemaking', 'cooking'];\r\n  \r\n  requiredSkills.forEach(skill => {\r\n    if (!playerStats[skill]) {\r\n      errors.push(`Missing skill: ${skill}`);\r\n    } else {\r\n      if (typeof playerStats[skill].level !== 'number' || playerStats[skill].level < 1) {\r\n        errors.push(`Invalid level for ${skill}`);\r\n      }\r\n      if (typeof playerStats[skill].xp !== 'number' || playerStats[skill].xp < 0) {\r\n        errors.push(`Invalid XP for ${skill}`);\r\n      }\r\n    }\r\n  });\r\n  \r\n  // Check inventory\r\n  if (!Array.isArray(playerStats.inventory) || playerStats.inventory.length !== 28) {\r\n    errors.push('Invalid inventory structure');\r\n  }\r\n  \r\n  // Check equipment\r\n  if (!playerStats.equipment) {\r\n    errors.push('Missing equipment object');\r\n  }\r\n  \r\n  return errors;\r\n}\r\n\r\n// Export all the working functions\r\nexport default {\r\n  XP_TABLE,\r\n  ITEMS,\r\n  createPlayerStats,\r\n  getLevel,\r\n  getXPForLevel,\r\n  getXPToNextLevel,\r\n  addItem,\r\n  removeItem,\r\n  grantXP,\r\n  equipItem,\r\n  unequipItem,\r\n  getEffectiveCombatStats,\r\n  calculateMaxHit,\r\n  validatePlayerStats\r\n};",
    "/**\r\n * Hyperfy Integration Bridge\r\n * \r\n * This module bridges the working RPG core logic with the real Hyperfy APIs.\r\n * It provides compatibility between our proven RPG system and Hyperfy's world system.\r\n */\r\n\r\n// Import the working RPG core\r\nimport { createPlayerStats, getLevel, XP_TABLE, ITEMS } from './rpg-core.js';\r\n\r\n// Global RPG state for Hyperfy integration\r\nlet hyperfyRPGState = {\r\n  players: new Map(),\r\n  npcs: new Map(),\r\n  items: new Map(),\r\n  initialized: false\r\n};\r\n\r\n/**\r\n * Initialize the RPG system within Hyperfy\r\n * @param {Object} app - Hyperfy app object\r\n * @param {Object} world - Hyperfy world object\r\n */\r\nexport function initializeHyperfyRPG(app, world) {\r\n  console.log('üéÆ Initializing Hyperfy RPG Bridge...');\r\n  \r\n  try {\r\n    // Store references\r\n    hyperfyRPGState.app = app;\r\n    hyperfyRPGState.world = world;\r\n    \r\n    // Configure app properties\r\n    app.configure([\r\n      {\r\n        type: 'text',\r\n        key: 'serverName',\r\n        label: 'Server Name',\r\n        initial: 'Hyperscape RPG'\r\n      },\r\n      {\r\n        type: 'boolean',\r\n        key: 'enableCombat',\r\n        label: 'Enable Combat',\r\n        initial: true\r\n      },\r\n      {\r\n        type: 'boolean',\r\n        key: 'enableSkills',\r\n        label: 'Enable Skills',\r\n        initial: true\r\n      },\r\n      {\r\n        type: 'boolean',\r\n        key: 'debugMode',\r\n        label: 'Debug Mode',\r\n        initial: false\r\n      }\r\n    ]);\r\n    \r\n    // Set up event handlers\r\n    setupHyperfyEventHandlers(app, world);\r\n    \r\n    // Initialize core systems\r\n    initializeRPGSystems();\r\n    \r\n    hyperfyRPGState.initialized = true;\r\n    console.log('‚úÖ Hyperfy RPG Bridge initialized successfully');\r\n    \r\n    // Send initialization complete event\r\n    app.send('rpg:initialized', {\r\n      timestamp: Date.now(),\r\n      playersOnline: hyperfyRPGState.players.size\r\n    });\r\n    \r\n    return true;\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Failed to initialize Hyperfy RPG:', error);\r\n    \r\n    // Send error event\r\n    app.send('rpg:error', {\r\n      error: error.message,\r\n      phase: 'initialization'\r\n    });\r\n    \r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Set up Hyperfy-specific event handlers\r\n */\r\nfunction setupHyperfyEventHandlers(app, world) {\r\n  // Player join event\r\n  app.on('playerJoin', (data) => {\r\n    try {\r\n      const playerId = data.player.id;\r\n      console.log(`üëã Player joining: ${playerId}`);\r\n      \r\n      // Create RPG stats for the player\r\n      const playerStats = createPlayerStats();\r\n      hyperfyRPGState.players.set(playerId, {\r\n        id: playerId,\r\n        hyperfyPlayer: data.player,\r\n        stats: playerStats,\r\n        position: data.player.position || { x: 0, y: 0, z: 0 },\r\n        inCombat: false,\r\n        target: null,\r\n        lastAction: null\r\n      });\r\n      \r\n      // Give starting equipment\r\n      giveStartingEquipment(playerId);\r\n      \r\n      // Send welcome message\r\n      app.send('rpg:playerJoined', {\r\n        playerId,\r\n        stats: playerStats,\r\n        message: 'Welcome to Hyperscape RPG!'\r\n      });\r\n      \r\n      console.log(`‚úÖ RPG data created for player: ${playerId}`);\r\n      \r\n    } catch (error) {\r\n      console.error('‚ùå Error handling player join:', error);\r\n      app.send('rpg:error', {\r\n        error: error.message,\r\n        phase: 'playerJoin',\r\n        playerId: data.player?.id\r\n      });\r\n    }\r\n  });\r\n  \r\n  // Player leave event\r\n  app.on('playerLeave', (data) => {\r\n    try {\r\n      const playerId = data.player.id;\r\n      console.log(`üëã Player leaving: ${playerId}`);\r\n      \r\n      // Save player data (in production, this would go to database)\r\n      const playerData = hyperfyRPGState.players.get(playerId);\r\n      if (playerData) {\r\n        console.log(`üíæ Saving player data for: ${playerId}`);\r\n        // TODO: Implement actual save to database\r\n      }\r\n      \r\n      // Remove from active players\r\n      hyperfyRPGState.players.delete(playerId);\r\n      \r\n      app.send('rpg:playerLeft', { playerId });\r\n      \r\n    } catch (error) {\r\n      console.error('‚ùå Error handling player leave:', error);\r\n    }\r\n  });\r\n  \r\n  // Player action event\r\n  app.on('playerAction', (data) => {\r\n    try {\r\n      handlePlayerAction(data);\r\n    } catch (error) {\r\n      console.error('‚ùå Error handling player action:', error);\r\n      app.send('rpg:error', {\r\n        error: error.message,\r\n        phase: 'playerAction',\r\n        action: data.action,\r\n        playerId: data.playerId\r\n      });\r\n    }\r\n  });\r\n  \r\n  // Update event\r\n  app.on('update', (deltaTime) => {\r\n    try {\r\n      updateRPGSystems(deltaTime);\r\n    } catch (error) {\r\n      console.error('‚ùå Error in RPG update:', error);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize core RPG systems\r\n */\r\nfunction initializeRPGSystems() {\r\n  console.log('üîß Initializing RPG systems...');\r\n  \r\n  // Initialize NPCs/mobs (mock for now)\r\n  initializeMobs();\r\n  \r\n  // Initialize items on ground (mock for now)\r\n  initializeGroundItems();\r\n  \r\n  console.log('‚úÖ RPG systems initialized');\r\n}\r\n\r\n/**\r\n * Give starting equipment to new players\r\n */\r\nfunction giveStartingEquipment(playerId) {\r\n  try {\r\n    const player = hyperfyRPGState.players.get(playerId);\r\n    if (!player) return;\r\n    \r\n    // Add starting items using our working addItem function\r\n    addItemToPlayer(playerId, 1, 1);    // Bronze sword\r\n    addItemToPlayer(playerId, 995, 25); // 25 coins\r\n    \r\n    console.log(`üéÅ Starting equipment given to ${playerId}`);\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Error giving starting equipment:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * Add item to player inventory (Hyperfy-compatible version)\r\n */\r\nexport function addItemToPlayer(playerId, itemId, quantity = 1) {\r\n  try {\r\n    const player = hyperfyRPGState.players.get(playerId);\r\n    if (!player) {\r\n      console.error(`‚ùå Player ${playerId} not found`);\r\n      return false;\r\n    }\r\n    \r\n    const item = ITEMS[itemId];\r\n    if (!item) {\r\n      console.error(`‚ùå Item ${itemId} not found`);\r\n      return false;\r\n    }\r\n    \r\n    // Use our working inventory logic\r\n    const inventory = player.stats.inventory;\r\n    \r\n    // Check for existing stackable items\r\n    if (item.stackable) {\r\n      for (let i = 0; i < inventory.length; i++) {\r\n        if (inventory[i] && inventory[i].itemId === itemId) {\r\n          inventory[i].quantity += quantity;\r\n          console.log(`‚úÖ Added ${item.name} x${quantity} to existing stack for ${playerId}`);\r\n          \r\n          // Send update to Hyperfy\r\n          hyperfyRPGState.app.send('rpg:itemAdded', {\r\n            playerId,\r\n            itemId,\r\n            quantity,\r\n            total: inventory[i].quantity,\r\n            slot: i\r\n          });\r\n          \r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Find empty slot\r\n    for (let i = 0; i < inventory.length; i++) {\r\n      if (!inventory[i]) {\r\n        inventory[i] = { itemId, quantity };\r\n        console.log(`‚úÖ Added ${item.name} x${quantity} to ${playerId} in slot ${i}`);\r\n        \r\n        // Send update to Hyperfy\r\n        hyperfyRPGState.app.send('rpg:itemAdded', {\r\n          playerId,\r\n          itemId,\r\n          quantity,\r\n          slot: i\r\n        });\r\n        \r\n        return true;\r\n      }\r\n    }\r\n    \r\n    console.error(`‚ùå Inventory full for ${playerId}`);\r\n    \r\n    // Send inventory full message\r\n    hyperfyRPGState.app.send('rpg:inventoryFull', { playerId });\r\n    \r\n    return false;\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Error adding item to player:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Grant XP to player (Hyperfy-compatible version)\r\n */\r\nexport function grantXPToPlayer(playerId, skill, amount) {\r\n  try {\r\n    const player = hyperfyRPGState.players.get(playerId);\r\n    if (!player) {\r\n      console.error(`‚ùå Player ${playerId} not found`);\r\n      return false;\r\n    }\r\n    \r\n    if (!player.stats[skill]) {\r\n      console.error(`‚ùå Skill ${skill} not found for player ${playerId}`);\r\n      return false;\r\n    }\r\n    \r\n    const oldLevel = player.stats[skill].level;\r\n    player.stats[skill].xp += amount;\r\n    const newLevel = getLevel(player.stats[skill].xp);\r\n    player.stats[skill].level = newLevel;\r\n    \r\n    console.log(`üìà ${playerId} gained ${amount} XP in ${skill} (Level ${newLevel})`);\r\n    \r\n    // Send XP update to Hyperfy\r\n    hyperfyRPGState.app.send('rpg:xpGained', {\r\n      playerId,\r\n      skill,\r\n      amount,\r\n      newXP: player.stats[skill].xp,\r\n      oldLevel,\r\n      newLevel\r\n    });\r\n    \r\n    // Check for level up\r\n    if (newLevel > oldLevel) {\r\n      console.log(`üéâ ${playerId} leveled ${skill} to ${newLevel}!`);\r\n      \r\n      // Send level up event\r\n      hyperfyRPGState.app.send('rpg:levelUp', {\r\n        playerId,\r\n        skill,\r\n        newLevel,\r\n        oldLevel\r\n      });\r\n    }\r\n    \r\n    return true;\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Error granting XP:', error);\r\n    return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Handle player actions\r\n */\r\nfunction handlePlayerAction(data) {\r\n  const { playerId, action, target, position } = data;\r\n  \r\n  console.log(`üéØ Player ${playerId} performing action: ${action}`);\r\n  \r\n  switch (action) {\r\n    case 'attack':\r\n      handleAttackAction(playerId, target);\r\n      break;\r\n      \r\n    case 'move':\r\n      handleMoveAction(playerId, position);\r\n      break;\r\n      \r\n    case 'pickup':\r\n      handlePickupAction(playerId, target);\r\n      break;\r\n      \r\n    case 'use':\r\n      handleUseAction(playerId, target);\r\n      break;\r\n      \r\n    default:\r\n      console.log(`‚ö†Ô∏è Unknown action: ${action}`);\r\n  }\r\n}\r\n\r\n/**\r\n * Handle attack actions\r\n */\r\nfunction handleAttackAction(playerId, targetId) {\r\n  try {\r\n    const player = hyperfyRPGState.players.get(playerId);\r\n    const target = hyperfyRPGState.npcs.get(targetId);\r\n    \r\n    if (!player || !target) {\r\n      console.error('‚ùå Invalid attack: player or target not found');\r\n      return;\r\n    }\r\n    \r\n    // Start combat\r\n    player.inCombat = true;\r\n    player.target = targetId;\r\n    \r\n    // Calculate damage using RuneScape formulas\r\n    const damage = calculateDamage(player.stats, target);\r\n    \r\n    console.log(`‚öîÔ∏è ${playerId} attacks ${targetId} for ${damage} damage`);\r\n    \r\n    // Apply damage\r\n    target.hitpoints.current -= damage;\r\n    \r\n    // Send combat update\r\n    hyperfyRPGState.app.send('rpg:combat', {\r\n      attackerId: playerId,\r\n      targetId,\r\n      damage,\r\n      targetHealth: target.hitpoints.current\r\n    });\r\n    \r\n    // Grant combat XP\r\n    grantXPToPlayer(playerId, 'attack', damage * 4);\r\n    grantXPToPlayer(playerId, 'strength', damage * 4);\r\n    grantXPToPlayer(playerId, 'hitpoints', damage * 1.33);\r\n    \r\n    // Check if target is dead\r\n    if (target.hitpoints.current <= 0) {\r\n      handleMobDeath(targetId, playerId);\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Error handling attack:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * Calculate damage using RuneScape formulas\r\n */\r\nfunction calculateDamage(attackerStats, target) {\r\n  // Simplified RuneScape damage calculation\r\n  const attackLevel = attackerStats.attack.level;\r\n  const strengthLevel = attackerStats.strength.level;\r\n  const defenseLevel = target.defense?.level || 1;\r\n  \r\n  // Attack roll\r\n  const attackRoll = Math.random() * (attackLevel + 8);\r\n  const defenseRoll = Math.random() * (defenseLevel + 8);\r\n  \r\n  if (attackRoll <= defenseRoll) {\r\n    return 0; // Miss\r\n  }\r\n  \r\n  // Damage roll\r\n  const maxHit = Math.floor(0.5 + (strengthLevel + 8) / 10);\r\n  return Math.floor(Math.random() * (maxHit + 1));\r\n}\r\n\r\n/**\r\n * Handle mob death\r\n */\r\nfunction handleMobDeath(mobId, killerId) {\r\n  try {\r\n    const mob = hyperfyRPGState.npcs.get(mobId);\r\n    if (!mob) return;\r\n    \r\n    console.log(`üíÄ Mob ${mobId} killed by ${killerId}`);\r\n    \r\n    // Drop loot\r\n    dropLoot(mob, killerId);\r\n    \r\n    // Grant additional XP for kill\r\n    grantXPToPlayer(killerId, 'attack', mob.level * 10);\r\n    \r\n    // Remove mob (in production, schedule respawn)\r\n    hyperfyRPGState.npcs.delete(mobId);\r\n    \r\n    // Send death event\r\n    hyperfyRPGState.app.send('rpg:mobDeath', {\r\n      mobId,\r\n      killerId,\r\n      mobType: mob.type\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Error handling mob death:', error);\r\n  }\r\n}\r\n\r\n/**\r\n * Drop loot from mob\r\n */\r\nfunction dropLoot(mob, killerId) {\r\n  // Simple loot table\r\n  const lootTable = {\r\n    goblin: [\r\n      { itemId: 995, quantity: [1, 5], chance: 1.0 }, // Coins (always)\r\n      { itemId: 1, quantity: 1, chance: 0.1 }         // Bronze sword (rare)\r\n    ]\r\n  };\r\n  \r\n  const drops = lootTable[mob.type] || [];\r\n  \r\n  drops.forEach(drop => {\r\n    if (Math.random() < drop.chance) {\r\n      const quantity = Array.isArray(drop.quantity) \r\n        ? Math.floor(Math.random() * (drop.quantity[1] - drop.quantity[0] + 1)) + drop.quantity[0]\r\n        : drop.quantity;\r\n      \r\n      addItemToPlayer(killerId, drop.itemId, quantity);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Initialize mobs (mock implementation)\r\n */\r\nfunction initializeMobs() {\r\n  // Create a test goblin\r\n  const goblinId = 'test-goblin-1';\r\n  hyperfyRPGState.npcs.set(goblinId, {\r\n    id: goblinId,\r\n    type: 'goblin',\r\n    level: 1,\r\n    attack: { level: 1 },\r\n    strength: { level: 1 },\r\n    defense: { level: 1 },\r\n    hitpoints: { current: 20, max: 20 },\r\n    position: { x: 10, y: 0, z: 10 }\r\n  });\r\n  \r\n  console.log('üëπ Test goblin created');\r\n}\r\n\r\n/**\r\n * Initialize ground items (mock implementation)\r\n */\r\nfunction initializeGroundItems() {\r\n  // Mock ground items\r\n  console.log('üíé Ground items initialized (mock)');\r\n}\r\n\r\n/**\r\n * Update RPG systems each frame\r\n */\r\nfunction updateRPGSystems(deltaTime) {\r\n  // Update combat timers, mob AI, etc.\r\n  // For now, this is a placeholder\r\n}\r\n\r\n/**\r\n * Get player data for external queries\r\n */\r\nexport function getPlayerData(playerId) {\r\n  return hyperfyRPGState.players.get(playerId);\r\n}\r\n\r\n/**\r\n * Get all players data\r\n */\r\nexport function getAllPlayersData() {\r\n  return Array.from(hyperfyRPGState.players.values());\r\n}\r\n\r\n/**\r\n * Check if RPG system is initialized\r\n */\r\nexport function isInitialized() {\r\n  return hyperfyRPGState.initialized;\r\n}\r\n\r\n// Export the state for debugging\r\nexport { hyperfyRPGState };",
    "/**\r\n * Hyperscape RPG - Main Hyperfy App\r\n * \r\n * This is the main entry point for the RPG system in Hyperfy.\r\n * It initializes the RPG bridge and sets up the game world.\r\n */\r\n\r\nimport { initializeHyperfyRPG, addItemToPlayer, grantXPToPlayer, getPlayerData, isInitialized } from './hyperfy-bridge.js';\r\n\r\n// App configuration\r\napp.configure([\r\n  {\r\n    type: 'text',\r\n    key: 'worldName',\r\n    label: 'World Name',\r\n    initial: 'Hyperscape RPG World'\r\n  },\r\n  {\r\n    type: 'boolean',\r\n    key: 'enableCombat',\r\n    label: 'Enable Combat System',\r\n    initial: true\r\n  },\r\n  {\r\n    type: 'boolean',\r\n    key: 'enableSkills',\r\n    label: 'Enable Skills System',\r\n    initial: true\r\n  },\r\n  {\r\n    type: 'boolean',\r\n    key: 'enableBanking',\r\n    label: 'Enable Banking System',\r\n    initial: true\r\n  },\r\n  {\r\n    type: 'number',\r\n    key: 'maxPlayers',\r\n    label: 'Maximum Players',\r\n    initial: 100,\r\n    min: 1,\r\n    max: 1000\r\n  },\r\n  {\r\n    type: 'boolean',\r\n    key: 'debugMode',\r\n    label: 'Debug Mode',\r\n    initial: false\r\n  }\r\n]);\r\n\r\n// Initialize RPG system when app starts\r\napp.on('init', () => {\r\n  try {\r\n    console.log('üéÆ Hyperscape RPG starting...');\r\n    console.log(`üìç World: ${props.worldName}`);\r\n    console.log(`‚öîÔ∏è Combat: ${props.enableCombat ? 'Enabled' : 'Disabled'}`);\r\n    console.log(`üìö Skills: ${props.enableSkills ? 'Enabled' : 'Disabled'}`);\r\n    console.log(`üè¶ Banking: ${props.enableBanking ? 'Enabled' : 'Disabled'}`);\r\n    console.log(`üë• Max Players: ${props.maxPlayers}`);\r\n    console.log(`üêõ Debug Mode: ${props.debugMode ? 'On' : 'Off'}`);\r\n    \r\n    // Initialize the RPG bridge\r\n    const initialized = initializeHyperfyRPG(app, world);\r\n    \r\n    if (initialized) {\r\n      console.log('‚úÖ Hyperscape RPG initialized successfully!');\r\n      \r\n      // Create visual elements for the world\r\n      createWorldElements();\r\n      \r\n      // Send initialization event\r\n      app.send('rpg:worldReady', {\r\n        worldName: props.worldName,\r\n        systems: {\r\n          combat: props.enableCombat,\r\n          skills: props.enableSkills,\r\n          banking: props.enableBanking\r\n        },\r\n        maxPlayers: props.maxPlayers\r\n      });\r\n      \r\n    } else {\r\n      console.error('‚ùå Failed to initialize Hyperscape RPG');\r\n      \r\n      // Send error event\r\n      app.send('rpg:initError', {\r\n        error: 'Failed to initialize RPG system'\r\n      });\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('üí• Critical error during RPG initialization:', error);\r\n    \r\n    // Send critical error event\r\n    app.send('rpg:criticalError', {\r\n      error: error.message,\r\n      stack: error.stack\r\n    });\r\n  }\r\n});\r\n\r\n// Handle player joins\r\napp.on('playerJoin', (data) => {\r\n  try {\r\n    console.log(`üëã Player joining: ${data.player.id}`);\r\n    \r\n    // The bridge handles the actual RPG initialization\r\n    // We just need to create visual elements for the player\r\n    \r\n    setTimeout(() => {\r\n      createPlayerVisuals(data.player);\r\n      \r\n      // Send welcome message\r\n      app.send('rpg:welcomePlayer', {\r\n        playerId: data.player.id,\r\n        worldName: props.worldName,\r\n        message: `Welcome to ${props.worldName}! Your adventure begins now.`\r\n      });\r\n    }, 100);\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Error handling player join:', error);\r\n  }\r\n});\r\n\r\n// Handle player leaves\r\napp.on('playerLeave', (data) => {\r\n  try {\r\n    console.log(`üëã Player leaving: ${data.player.id}`);\r\n    \r\n    // Clean up player-specific visuals\r\n    cleanupPlayerVisuals(data.player);\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Error handling player leave:', error);\r\n  }\r\n});\r\n\r\n// Handle chat commands\r\napp.on('chatMessage', (data) => {\r\n  try {\r\n    const { player, message } = data;\r\n    \r\n    // Check for RPG commands\r\n    if (message.startsWith('/rpg')) {\r\n      handleRPGCommand(player, message);\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Error handling chat message:', error);\r\n  }\r\n});\r\n\r\n// Create world elements\r\nfunction createWorldElements() {\r\n  try {\r\n    console.log('üåç Creating world elements...');\r\n    \r\n    // Create spawn area\r\n    const spawnArea = app.create('group');\r\n    spawnArea.position.set(0, 0, 0);\r\n    \r\n    // Create starter town elements\r\n    createStarterTown(spawnArea);\r\n    \r\n    // Create test goblin\r\n    if (props.enableCombat) {\r\n      createTestGoblin();\r\n    }\r\n    \r\n    // Create resource nodes\r\n    createResourceNodes();\r\n    \r\n    console.log('‚úÖ World elements created');\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Error creating world elements:', error);\r\n  }\r\n}\r\n\r\n// Create starter town\r\nfunction createStarterTown(parent) {\r\n  try {\r\n    console.log('üèòÔ∏è Creating starter town...');\r\n    \r\n    // Bank area\r\n    if (props.enableBanking) {\r\n      const bank = app.create('mesh');\r\n      bank.position.set(5, 0, 0);\r\n      bank.material.color = 'gold';\r\n      \r\n      // Bank interaction\r\n      const bankAction = app.create('action');\r\n      bankAction.label = 'Bank';\r\n      bankAction.distance = 3;\r\n      bankAction.onTrigger = (player) => {\r\n        handleBankInteraction(player);\r\n      };\r\n      \r\n      bank.add(bankAction);\r\n      parent.add(bank);\r\n    }\r\n    \r\n    // General store\r\n    const store = app.create('mesh');\r\n    store.position.set(-5, 0, 0);\r\n    store.material.color = 'brown';\r\n    \r\n    // Store interaction\r\n    const storeAction = app.create('action');\r\n    storeAction.label = 'General Store';\r\n    storeAction.distance = 3;\r\n    storeAction.onTrigger = (player) => {\r\n      handleStoreInteraction(player);\r\n    };\r\n    \r\n    store.add(storeAction);\r\n    parent.add(store);\r\n    \r\n    console.log('‚úÖ Starter town created');\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Error creating starter town:', error);\r\n  }\r\n}\r\n\r\n// Create test goblin\r\nfunction createTestGoblin() {\r\n  try {\r\n    console.log('üëπ Creating test goblin...');\r\n    \r\n    const goblin = app.create('mesh');\r\n    goblin.position.set(10, 0, 10);\r\n    goblin.material.color = 'green';\r\n    \r\n    // Attack action\r\n    const attackAction = app.create('action');\r\n    attackAction.label = 'Attack Goblin';\r\n    attackAction.distance = 2;\r\n    attackAction.onTrigger = (player) => {\r\n      handleAttackAction(player, 'test-goblin-1');\r\n    };\r\n    \r\n    goblin.add(attackAction);\r\n    \r\n    console.log('‚úÖ Test goblin created');\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Error creating test goblin:', error);\r\n  }\r\n}\r\n\r\n// Create resource nodes\r\nfunction createResourceNodes() {\r\n  try {\r\n    console.log('üå≥ Creating resource nodes...');\r\n    \r\n    // Tree for woodcutting\r\n    const tree = app.create('mesh');\r\n    tree.position.set(0, 0, 10);\r\n    tree.material.color = 'darkgreen';\r\n    \r\n    const chopAction = app.create('action');\r\n    chopAction.label = 'Chop Tree';\r\n    chopAction.distance = 2;\r\n    chopAction.onTrigger = (player) => {\r\n      handleChopAction(player);\r\n    };\r\n    \r\n    tree.add(chopAction);\r\n    \r\n    // Fishing spot\r\n    const fishingSpot = app.create('mesh');\r\n    fishingSpot.position.set(0, 0, -10);\r\n    fishingSpot.material.color = 'blue';\r\n    \r\n    const fishAction = app.create('action');\r\n    fishAction.label = 'Fish';\r\n    fishAction.distance = 2;\r\n    fishAction.onTrigger = (player) => {\r\n      handleFishAction(player);\r\n    };\r\n    \r\n    fishingSpot.add(fishAction);\r\n    \r\n    console.log('‚úÖ Resource nodes created');\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Error creating resource nodes:', error);\r\n  }\r\n}\r\n\r\n// Create player visuals\r\nfunction createPlayerVisuals(player) {\r\n  try {\r\n    // Create player-specific UI or indicators\r\n    console.log(`üé® Creating visuals for player: ${player.id}`);\r\n    \r\n    // In a full implementation, this would create:\r\n    // - Health bar\r\n    // - XP indicators\r\n    // - Equipment visuals\r\n    // - etc.\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Error creating player visuals:', error);\r\n  }\r\n}\r\n\r\n// Clean up player visuals\r\nfunction cleanupPlayerVisuals(player) {\r\n  try {\r\n    console.log(`üßπ Cleaning up visuals for player: ${player.id}`);\r\n    \r\n    // Remove player-specific UI elements\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Error cleaning up player visuals:', error);\r\n  }\r\n}\r\n\r\n// Handle RPG commands\r\nfunction handleRPGCommand(player, message) {\r\n  try {\r\n    const args = message.split(' ');\r\n    const command = args[1];\r\n    \r\n    switch (command) {\r\n      case 'stats':\r\n        showPlayerStats(player);\r\n        break;\r\n        \r\n      case 'give':\r\n        if (props.debugMode) {\r\n          const itemId = parseInt(args[2]);\r\n          const quantity = parseInt(args[3]) || 1;\r\n          if (itemId) {\r\n            addItemToPlayer(player.id, itemId, quantity);\r\n            app.send('rpg:message', {\r\n              playerId: player.id,\r\n              message: `Given item ${itemId} x${quantity}`\r\n            });\r\n          }\r\n        }\r\n        break;\r\n        \r\n      case 'xp':\r\n        if (props.debugMode) {\r\n          const skill = args[2];\r\n          const amount = parseInt(args[3]) || 100;\r\n          if (skill) {\r\n            grantXPToPlayer(player.id, skill, amount);\r\n            app.send('rpg:message', {\r\n              playerId: player.id,\r\n              message: `Granted ${amount} XP in ${skill}`\r\n            });\r\n          }\r\n        }\r\n        break;\r\n        \r\n      case 'help':\r\n        showRPGHelp(player);\r\n        break;\r\n        \r\n      default:\r\n        app.send('rpg:message', {\r\n          playerId: player.id,\r\n          message: 'Unknown RPG command. Type /rpg help for help.'\r\n        });\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Error handling RPG command:', error);\r\n  }\r\n}\r\n\r\n// Show player stats\r\nfunction showPlayerStats(player) {\r\n  try {\r\n    const playerData = getPlayerData(player.id);\r\n    if (!playerData) {\r\n      app.send('rpg:message', {\r\n        playerId: player.id,\r\n        message: 'Player data not found.'\r\n      });\r\n      return;\r\n    }\r\n    \r\n    const stats = playerData.stats;\r\n    const message = `\r\nCombat: ATK ${stats.attack.level} STR ${stats.strength.level} DEF ${stats.defense.level} HP ${stats.hitpoints.current}/${stats.hitpoints.max} RNG ${stats.ranged.level}\r\nSkills: WC ${stats.woodcutting.level} FISH ${stats.fishing.level} FM ${stats.firemaking.level} COOK ${stats.cooking.level}\r\n    `.trim();\r\n    \r\n    app.send('rpg:message', {\r\n      playerId: player.id,\r\n      message\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('‚ùå Error showing player stats:', error);\r\n  }\r\n}\r\n\r\n// Show RPG help\r\nfunction showRPGHelp(player) {\r\n  const helpMessage = `\r\nRPG Commands:\r\n/rpg stats - Show your stats\r\n/rpg help - Show this help\r\n${props.debugMode ? `\r\nDebug Commands:\r\n/rpg give <itemId> <quantity> - Give item\r\n/rpg xp <skill> <amount> - Grant XP\r\n` : ''}\r\n  `.trim();\r\n  \r\n  app.send('rpg:message', {\r\n    playerId: player.id,\r\n    message: helpMessage\r\n  });\r\n}\r\n\r\n// Handle action interactions\r\nfunction handleAttackAction(player, targetId) {\r\n  if (!props.enableCombat) return;\r\n  \r\n  app.trigger('playerAction', {\r\n    playerId: player.id,\r\n    action: 'attack',\r\n    target: targetId\r\n  });\r\n}\r\n\r\nfunction handleChopAction(player) {\r\n  if (!props.enableSkills) return;\r\n  \r\n  // Check if player has hatchet\r\n  const playerData = getPlayerData(player.id);\r\n  if (!playerData) return;\r\n  \r\n  // Simple woodcutting - would check for hatchet in real implementation\r\n  addItemToPlayer(player.id, 80, 1); // Add logs\r\n  grantXPToPlayer(player.id, 'woodcutting', 25);\r\n  \r\n  app.send('rpg:message', {\r\n    playerId: player.id,\r\n    message: 'You chop some logs.'\r\n  });\r\n}\r\n\r\nfunction handleFishAction(player) {\r\n  if (!props.enableSkills) return;\r\n  \r\n  // Simple fishing\r\n  addItemToPlayer(player.id, 81, 1); // Add raw fish\r\n  grantXPToPlayer(player.id, 'fishing', 20);\r\n  \r\n  app.send('rpg:message', {\r\n    playerId: player.id,\r\n    message: 'You catch a fish.'\r\n  });\r\n}\r\n\r\nfunction handleBankInteraction(player) {\r\n  if (!props.enableBanking) return;\r\n  \r\n  app.send('rpg:openBank', {\r\n    playerId: player.id\r\n  });\r\n}\r\n\r\nfunction handleStoreInteraction(player) {\r\n  app.send('rpg:openStore', {\r\n    playerId: player.id\r\n  });\r\n}\r\n\r\n// Update loop\r\napp.on('update', (deltaTime) => {\r\n  try {\r\n    // Update RPG systems\r\n    if (isInitialized()) {\r\n      // The bridge handles most updates\r\n      // This is where we'd update visual elements, animations, etc.\r\n    }\r\n  } catch (error) {\r\n    console.error('‚ùå Error in update loop:', error);\r\n  }\r\n});\r\n\r\nconsole.log('üìú Hyperscape RPG app script loaded');"
  ],
  "mappings": "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",
  "debugId": "51FF254AC580F2EE64756E2164756E21",
  "names": []
}