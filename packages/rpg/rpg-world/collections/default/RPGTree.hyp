{"blueprint":{"id":"RPGTree001","version":1,"name":"RPG Tree","author":"RPG System","url":null,"desc":"A tree for woodcutting resource gathering","model":null,"script":null,"props":{"treeName":"Oak Tree","visualColor":"brown","logType":"Oak Log"},"preload":false,"public":true,"locked":false,"unique":false,"disabled":false},"assets":[]}

// RPG Tree App for Hyperfy
// Woodcutting resource gathering per the GDD

console.log('ðŸŒ³ Initializing RPG Tree Hyperfy App...');

app.configure([
  {
    key: 'treeName',
    type: 'text',
    label: 'Tree Name',
    initial: 'Oak Tree',
    hint: 'The name of the tree'
  },
  {
    key: 'visualColor',
    type: 'text',
    label: 'Visual Color',
    initial: 'brown',
    hint: 'Color of the tree representation'
  },
  {
    key: 'logType',
    type: 'text',
    label: 'Log Type',
    initial: 'Oak Log',
    hint: 'Type of log this tree produces'
  }
])

// Tree state
let treeHealth = 100
let isChopped = false
let respawnTime = 30000 // 30 seconds

// Create tree visual representation
const treeMesh = app.create('mesh')
treeMesh.geometry = 'box'
treeMesh.scale.set(1, 3, 1)
treeMesh.position.set(0, 1.5, 0)
treeMesh.material.color = props.visualColor
treeMesh.castShadow = true

// Create tree crown
const crownMesh = app.create('mesh')
crownMesh.geometry = 'box'
crownMesh.scale.set(2, 2, 2)
crownMesh.position.set(0, 3.5, 0)
crownMesh.material.color = 'green'
crownMesh.castShadow = true

// Create tree info sign
const treeSign = app.create('ui', {
  text: props.treeName,
  fontSize: 14,
  color: 'white',
  backgroundColor: 'rgba(0,0,0,0.7)',
  padding: 4,
  borderRadius: 3
})
treeSign.position.set(0, 5, 0)
treeSign.billboard = true

// Add to app
app.add(treeMesh)
app.add(crownMesh)
app.add(treeSign)

// Create woodcutting action
const chopAction = app.create('action')
chopAction.label = `Chop ${props.treeName}`
chopAction.distance = 3
chopAction.onTrigger = (player) => {
  if (isChopped) {
    world.chat.send('ðŸŒ³ This tree has already been chopped down!')
    return
  }
  
  // Check if player has hatchet (in full implementation)
  world.chat.send(`ðŸª“ You start chopping the ${props.treeName}...`)
  
  // Simulate chopping time
  setTimeout(() => {
    if (!isChopped) {
      world.chat.send(`ðŸªµ You received ${props.logType}!`)
      world.chat.send(`ðŸŒ³ The ${props.treeName} has been chopped down.`)
      
      // Tree chopped state
      isChopped = true
      treeMesh.material.color = 'gray'
      crownMesh.visible = false
      treeSign.text = `${props.treeName} (Chopped)`
      
      // Schedule respawn
      setTimeout(() => {
        isChopped = false
        treeMesh.material.color = props.visualColor
        crownMesh.visible = true
        treeSign.text = props.treeName
        world.chat.send(`ðŸŒ± The ${props.treeName} has regrown!`)
      }, respawnTime)
    }
  }, 3000) // 3 second chop time
}

const inspectAction = app.create('action')
inspectAction.label = 'Inspect Tree'
inspectAction.distance = 4
inspectAction.onTrigger = (player) => {
  if (isChopped) {
    world.chat.send(`ðŸŒ³ ${props.treeName} (Chopped Down)`)
    world.chat.send('â€¢ This tree has been chopped down and will regrow shortly')
  } else {
    world.chat.send(`ðŸŒ³ ${props.treeName}`)
    world.chat.send(`â€¢ Produces: ${props.logType}`)
    world.chat.send('â€¢ Requires: Hatchet (Bronze)')
    world.chat.send('â€¢ Respawn time: 30 seconds')
  }
}

treeMesh.add(chopAction)
treeMesh.add(inspectAction)

// Tree API functions
app.chopTree = (playerId) => {
  if (isChopped) return { success: false, message: 'Tree already chopped' }
  
  isChopped = true
  // In full implementation, would check player has hatchet and add log to inventory
  return { 
    success: true, 
    message: `Chopped ${props.treeName}`,
    reward: props.logType,
    experience: 25
  }
}

app.isChopped = () => isChopped
app.getLogType = () => props.logType

// Display tree info
world.chat.send(`ðŸŒ³ ${props.treeName} is ready for woodcutting!`)
world.chat.send(`Produces: ${props.logType} (requires Bronze Hatchet)`)