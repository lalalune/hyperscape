app.configure([
  {
    key: 'worldTheme',
    type: 'select',
    label: 'World Theme',
    options: [
      { label: 'Fantasy', value: 'fantasy' },
      { label: 'Apocalyptic', value: 'apocalyptic' },
      { label: 'Balanced', value: 'balanced' },
      { label: 'Challenging', value: 'challenging' }
    ],
    initial: 'fantasy',
    hint: 'Overall theme of the world'
  },
  {
    key: 'worldSize',
    type: 'select',
    label: 'World Size',
    options: [
      { label: 'Small (200x200)', value: 'small' },
      { label: 'Medium (500x500)', value: 'medium' },
      { label: 'Large (1000x1000)', value: 'large' }
    ],
    initial: 'medium',
    hint: 'Size of the generated world'
  },
  {
    key: 'difficulty',
    type: 'select',
    label: 'Difficulty',
    options: [
      { label: 'Easy', value: 'easy' },
      { label: 'Medium', value: 'medium' },
      { label: 'Hard', value: 'hard' }
    ],
    initial: 'medium',
    hint: 'World difficulty level'
  },
  {
    key: 'seed',
    type: 'number',
    label: 'World Seed',
    initial: 12345,
    min: 1,
    max: 999999,
    hint: 'Random seed for world generation'
  },
  {
    key: 'generateWithLLM',
    type: 'toggle',
    label: 'Generate with LLM',
    initial: false,
    hint: 'Use LLM to generate world design (requires API key)'
  },
  {
    key: 'showDebugInfo',
    type: 'toggle',
    label: 'Show Debug Info',
    initial: true,
    hint: 'Display world generation debug information'
  }
])

// Import the procedural world generator
import { ProceduralWorldGenerator } from '../../../rpg/src/world/ProceduralWorldGenerator.js'

// World generation state
let worldGenerator = null
let terrainSystem = null
let worldStats = null
let debugVisuals = null

// Initialize world generation
async function initializeProceduralWorld() {
  console.log('[ProceduralRPGWorld] Initializing procedural world generation...')
  
  try {
    // Create world generator
    worldGenerator = new ProceduralWorldGenerator(world)
    
    // Create world design prompt
    const worldPrompt = {
      theme: props.worldTheme,
      difficulty: props.difficulty,
      size: props.worldSize,
      biomes: [], // Will be selected based on theme
      features: ['towns', 'resources', 'mobs', 'safe_zones'],
      lore: `A ${props.worldTheme} world of ${props.difficulty} difficulty`
    }
    
    // Generate world design
    let worldConfig
    if (props.generateWithLLM) {
      worldConfig = await worldGenerator.generateWorldDesign(worldPrompt)
    } else {
      // Use the existing configuration
      worldConfig = await worldGenerator.generateWorldDesign(worldPrompt)
      worldConfig.seed = props.seed
    }
    
    console.log('[ProceduralRPGWorld] Generated world config:', worldConfig)
    
    // Initialize world with generated configuration
    await worldGenerator.initializeWorld(worldConfig)
    
    // Get terrain system for later use
    terrainSystem = worldGenerator.getTerrain()
    
    // Get world statistics
    worldStats = worldGenerator.getWorldStats()
    
    console.log('[ProceduralRPGWorld] World generation complete!')
    
    // Create debug visualizations
    if (props.showDebugInfo) {
      createDebugVisualizations()
    }
    
    // Create a test character
    createTestCharacter()
    
  } catch (error) {
    console.error('[ProceduralRPGWorld] World generation failed:', error)
  }
}

// Create debug visualizations
function createDebugVisualizations() {
  if (!terrainSystem || !worldStats) return
  
  console.log('[ProceduralRPGWorld] Creating debug visualizations...')
  
  debugVisuals = new THREE.Group()
  
  // Visualize biome centers
  const biomePoints = worldStats.biomes
  for (const biome of biomePoints) {
    const geometry = new THREE.SphereGeometry(5, 8, 8)
    const material = new THREE.MeshBasicMaterial({ 
      color: getBiomeColor(biome.biome.id),
      transparent: true,
      opacity: 0.7
    })
    const sphere = new THREE.Mesh(geometry, material)
    sphere.position.set(biome.x, 20, biome.z)
    debugVisuals.add(sphere)
    
    // Add biome label
    const label = createTextLabel(biome.biome.name, biome.x, 25, biome.z)
    debugVisuals.add(label)
  }
  
  // Visualize town locations
  const towns = worldStats.towns
  for (const town of towns) {
    const geometry = new THREE.BoxGeometry(8, 8, 8)
    const material = new THREE.MeshBasicMaterial({ color: 0xffff00 })
    const cube = new THREE.Mesh(geometry, material)
    cube.position.copy(town)
    cube.position.y += 10
    debugVisuals.add(cube)
    
    // Add town label
    const label = createTextLabel('Town', town.x, town.y + 15, town.z)
    debugVisuals.add(label)
  }
  
  app.add(debugVisuals)
}

// Get biome color for visualization
function getBiomeColor(biomeId) {
  const colors = {
    'mistwood_valley': 0x4a7c59,
    'goblin_wastes': 0x8b4513,
    'darkwood_forest': 0x2d4a2d,
    'northern_reaches': 0xf0f8ff,
    'great_lakes': 0x4682b4,
    'blasted_lands': 0x8b0000,
    'windswept_plains': 0x9acd32,
    'bramblewood_thicket': 0x556b2f
  }
  return colors[biomeId] || 0xffffff
}

// Create text label for debug info
function createTextLabel(text, x, y, z) {
  const canvas = document.createElement('canvas')
  const context = canvas.getContext('2d')
  canvas.width = 256
  canvas.height = 64
  
  context.fillStyle = 'rgba(0, 0, 0, 0.8)'
  context.fillRect(0, 0, canvas.width, canvas.height)
  
  context.fillStyle = 'white'
  context.font = '16px Arial'
  context.textAlign = 'center'
  context.fillText(text, canvas.width / 2, canvas.height / 2)
  
  const texture = new THREE.CanvasTexture(canvas)
  const material = new THREE.MeshBasicMaterial({ 
    map: texture,
    transparent: true,
    side: THREE.DoubleSide
  })
  const geometry = new THREE.PlaneGeometry(10, 2.5)
  const plane = new THREE.Mesh(geometry, material)
  plane.position.set(x, y, z)
  
  return plane
}

// Create test character using existing Hyperfy Controller
function createTestCharacter() {
  console.log('[ProceduralRPGWorld] Creating test character...')
  
  // Create character controller using Hyperfy's existing system
  const controller = app.create('controller')
  controller.radius = 0.5
  controller.height = 1.8
  controller.visible = true
  controller.layer = 'player'
  controller.tag = 'test_player'
  
  // Position character at a town if available
  if (worldStats && worldStats.towns.length > 0) {
    const spawnTown = worldStats.towns[0]
    controller.position.set(spawnTown.x, spawnTown.y + 2, spawnTown.z)
  } else {
    controller.position.set(0, 10, 0)
  }
  
  // Add character to world
  world.add(controller)
  
  // Create character input handler
  createCharacterInputHandler(controller)
  
  // Create character HUD
  createCharacterHUD(controller)
}

// Create character input handler
function createCharacterInputHandler(controller) {
  const movement = {
    forward: false,
    backward: false,
    left: false,
    right: false,
    jump: false,
    run: false
  }
  
  const velocity = new THREE.Vector3()
  const moveSpeed = 5
  const jumpSpeed = 8
  
  // Input handlers
  function handleKeyDown(event) {
    switch(event.code) {
      case 'KeyW': movement.forward = true; break
      case 'KeyS': movement.backward = true; break
      case 'KeyA': movement.left = true; break
      case 'KeyD': movement.right = true; break
      case 'Space': movement.jump = true; event.preventDefault(); break
      case 'ShiftLeft': movement.run = true; break
    }
  }
  
  function handleKeyUp(event) {
    switch(event.code) {
      case 'KeyW': movement.forward = false; break
      case 'KeyS': movement.backward = false; break
      case 'KeyA': movement.left = false; break
      case 'KeyD': movement.right = false; break
      case 'Space': movement.jump = false; break
      case 'ShiftLeft': movement.run = false; break
    }
  }
  
  // Add event listeners
  if (typeof window !== 'undefined') {
    window.addEventListener('keydown', handleKeyDown)
    window.addEventListener('keyup', handleKeyUp)
  }
  
  // Update movement
  app.on('update', (deltaTime) => {
    // Calculate movement direction
    const moveDirection = new THREE.Vector3()
    
    if (movement.forward) moveDirection.z -= 1
    if (movement.backward) moveDirection.z += 1
    if (movement.left) moveDirection.x -= 1
    if (movement.right) moveDirection.x += 1
    
    if (moveDirection.length() > 0) {
      moveDirection.normalize()
      const speed = movement.run ? moveSpeed * 1.5 : moveSpeed
      moveDirection.multiplyScalar(speed * deltaTime)
      
      // Apply horizontal movement
      velocity.x = moveDirection.x
      velocity.z = moveDirection.z
    } else {
      velocity.x = 0
      velocity.z = 0
    }
    
    // Handle jumping
    if (movement.jump && controller.isGrounded) {
      velocity.y = jumpSpeed
      movement.jump = false
    }
    
    // Apply gravity
    if (!controller.isGrounded) {
      velocity.y -= 9.81 * deltaTime
    } else if (velocity.y < 0) {
      velocity.y = 0
    }
    
    // Apply movement
    if (velocity.length() > 0) {
      controller.move(velocity.clone().multiplyScalar(deltaTime))
    }
  })
  
  // Cleanup
  app.on('destroy', () => {
    if (typeof window !== 'undefined') {
      window.removeEventListener('keydown', handleKeyDown)
      window.removeEventListener('keyup', handleKeyUp)
    }
  })
}

// Create character HUD
function createCharacterHUD(controller) {
  if (!props.showDebugInfo) return
  
  const hudCanvas = document.createElement('canvas')
  hudCanvas.width = 400
  hudCanvas.height = 300
  const hudContext = hudCanvas.getContext('2d')
  
  const hudTexture = new THREE.CanvasTexture(hudCanvas)
  const hudMaterial = new THREE.MeshBasicMaterial({ 
    map: hudTexture,
    transparent: true,
    side: THREE.DoubleSide
  })
  const hudGeometry = new THREE.PlaneGeometry(20, 15)
  const hudPlane = new THREE.Mesh(hudGeometry, hudMaterial)
  hudPlane.position.set(0, 20, 0)
  app.add(hudPlane)
  
  // Update HUD
  app.on('update', () => {
    updateHUD(hudContext, hudCanvas, hudTexture, controller)
  })
}

// Update HUD display
function updateHUD(context, canvas, texture, controller) {
  // Clear canvas
  context.fillStyle = 'rgba(0, 0, 0, 0.8)'
  context.fillRect(0, 0, canvas.width, canvas.height)
  
  // Set text style
  context.fillStyle = 'white'
  context.font = '14px monospace'
  
  // Display character information
  let y = 25
  const pos = controller.position
  
  context.fillText(`Position: ${pos.x.toFixed(1)}, ${pos.y.toFixed(1)}, ${pos.z.toFixed(1)}`, 10, y)
  y += 20
  
  context.fillText(`Grounded: ${controller.isGrounded}`, 10, y)
  y += 20
  
  // Display terrain information
  if (terrainSystem) {
    const height = terrainSystem.getHeightAt(pos.x, pos.z)
    context.fillText(`Terrain Height: ${height.toFixed(2)}`, 10, y)
    y += 20
    
    const walkable = terrainSystem.isWalkable(pos.x, pos.z)
    context.fillText(`Walkable: ${walkable}`, 10, y)
    y += 20
    
    const spawnData = terrainSystem.getSpawnDataAt(pos.x, pos.z)
    if (spawnData) {
      context.fillText(`Biome: ${spawnData.biome.name}`, 10, y)
      y += 20
    }
  }
  
  // Display controls
  y += 10
  context.fillText('Controls:', 10, y)
  y += 20
  context.fillText('WASD: Move', 10, y)
  y += 15
  context.fillText('Space: Jump', 10, y)
  y += 15
  context.fillText('Shift: Run', 10, y)
  
  // Display world stats
  if (worldStats) {
    y += 20
    context.fillText(`World: ${worldStats.config.worldSize}x${worldStats.config.worldSize}`, 10, y)
    y += 15
    context.fillText(`Seed: ${worldStats.config.seed}`, 10, y)
    y += 15
    context.fillText(`Biomes: ${worldStats.config.biomeCount}`, 10, y)
  }
  
  // Update texture
  texture.needsUpdate = true
}

// Setup lighting
function setupLighting() {
  // Ambient light
  const ambientLight = new THREE.AmbientLight(0x404040, 0.4)
  app.add(ambientLight)
  
  // Directional light (sun)
  const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8)
  directionalLight.position.set(100, 100, 100)
  directionalLight.castShadow = true
  directionalLight.shadow.mapSize.width = 2048
  directionalLight.shadow.mapSize.height = 2048
  directionalLight.shadow.camera.near = 0.1
  directionalLight.shadow.camera.far = 500
  directionalLight.shadow.camera.left = -100
  directionalLight.shadow.camera.right = 100
  directionalLight.shadow.camera.top = 100
  directionalLight.shadow.camera.bottom = -100
  app.add(directionalLight)
}

// Setup camera
function setupCamera() {
  // The camera will be controlled by the player or world system
  console.log('[ProceduralRPGWorld] Camera setup handled by world system')
}

// Initialize when app starts
app.on('start', async () => {
  console.log('[ProceduralRPGWorld] Starting procedural RPG world...')
  
  // Setup lighting
  setupLighting()
  
  // Setup camera
  setupCamera()
  
  // Initialize world generation
  await initializeProceduralWorld()
  
  console.log('[ProceduralRPGWorld] Procedural RPG world ready!')
})

// Cleanup
app.on('destroy', () => {
  console.log('[ProceduralRPGWorld] Cleaning up...')
  
  if (debugVisuals) {
    app.remove(debugVisuals)
  }
})

// Export world data for other systems
app.getWorldData = function() {
  return {
    generator: worldGenerator,
    terrain: terrainSystem,
    stats: worldStats,
    config: {
      theme: props.worldTheme,
      size: props.worldSize,
      difficulty: props.difficulty,
      seed: props.seed
    }
  }
}

// Export terrain queries for other systems
app.getTerrainHeight = function(x, z) {
  return terrainSystem ? terrainSystem.getHeightAt(x, z) : 0
}

app.getTerrainBiome = function(x, z) {
  return terrainSystem ? terrainSystem.getBiomeAt(x, z) : null
}

app.isTerrainWalkable = function(x, z) {
  return terrainSystem ? terrainSystem.isWalkable(x, z) : true
}