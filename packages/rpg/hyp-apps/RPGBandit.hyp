{"blueprint":{"id":"RPGBandit001","version":1,"name":"RPG Bandit","author":"RPG System","url":null,"desc":"A desperate bandit enemy for low-level players","model":null,"script":null,"props":{"banditName":"Bandit","level":3,"health":25,"visualColor":"brown"},"preload":false,"public":true,"locked":false,"unique":false,"disabled":false},"assets":[]}

// RPG Bandit App for Hyperfy
// A desperate bandit enemy according to the GDD

console.log('🏹 Initializing RPG Bandit Hyperfy App...');

app.configure([
  {
    key: 'banditName',
    type: 'text',
    label: 'Bandit Name',
    initial: 'Bandit',
    hint: 'The name of the bandit'
  },
  {
    key: 'level',
    type: 'number',
    label: 'Level',
    initial: 3,
    min: 1,
    max: 10,
    hint: 'Combat level of the bandit'
  },
  {
    key: 'health',
    type: 'number',
    label: 'Health Points',
    initial: 25,
    min: 10,
    max: 100,
    hint: 'Starting health points'
  },
  {
    key: 'visualColor',
    type: 'text',
    label: 'Visual Color',
    initial: 'brown',
    hint: 'Color of the bandit representation'
  }
])

// Bandit stats and data
let banditStats = {
  name: props.banditName,
  level: props.level,
  hitpoints: { current: props.health, max: props.health },
  attack: 5,
  strength: 5,
  defense: 3,
  inCombat: false,
  target: null,
  lastAttack: 0,
  aggroRange: 8,
  respawnTime: 30000,
  isDead: false
}

// Create bandit visual representation
const banditMesh = app.create('mesh')
banditMesh.geometry = 'box'
banditMesh.scale.set(0.8, 1.6, 0.8)
banditMesh.position.set(0, 0.8, 0)
banditMesh.material.color = props.visualColor
banditMesh.castShadow = true

// Create name tag
const nameTag = app.create('ui', {
  text: banditStats.name,
  fontSize: 12,
  color: 'white',
  backgroundColor: 'rgba(0,0,0,0.8)',
  padding: 4,
  borderRadius: 4
})
nameTag.position.set(0, 2, 0)
nameTag.billboard = true

// Create health bar
const healthBarBg = app.create('ui', {
  width: 60,
  height: 6,
  backgroundColor: 'rgba(0,0,0,0.8)',
  borderRadius: 3
})
healthBarBg.position.set(0, 1.8, 0)
healthBarBg.billboard = true

const healthBarFill = app.create('ui', {
  width: 56,
  height: 2,
  backgroundColor: 'red',
  borderRadius: 1
})
healthBarFill.position.set(0, 0, 0)
healthBarBg.add(healthBarFill)

// Add to app
app.add(banditMesh)
app.add(nameTag)
app.add(healthBarBg)

// Create combat action
const attackAction = app.create('action')
attackAction.label = 'Attack Bandit'
attackAction.distance = 2
attackAction.duration = 1.2
attackAction.onTrigger = (player) => {
  if (banditStats.isDead) return
  
  // Calculate damage (simplified)
  const damage = Math.floor(Math.random() * 8) + 2
  banditStats.hitpoints.current -= damage
  
  world.chat.send(`You hit the ${banditStats.name} for ${damage} damage!`)
  
  // Update health bar
  const healthPercentage = banditStats.hitpoints.current / banditStats.hitpoints.max
  healthBarFill.width = 56 * healthPercentage
  healthBarFill.backgroundColor = healthPercentage > 0.3 ? 'red' : 'darkred'
  
  if (banditStats.hitpoints.current <= 0) {
    handleDeath()
  }
}

banditMesh.add(attackAction)

// Loot table for bandits (GDD: small amounts of coins)
const lootTable = [
  { id: 995, quantity: 3, chance: 1.0 }, // Small amount of coins (always)
  { id: 995, quantity: 2, chance: 0.5 }  // Extra coins (50% chance)
]

function dropLoot() {
  const drops = []
  
  for (const lootItem of lootTable) {
    if (Math.random() < lootItem.chance) {
      drops.push(lootItem)
    }
  }
  
  if (drops.length > 0) {
    // Create loot pile
    const lootPile = app.create('mesh')
    lootPile.geometry = 'sphere'
    lootPile.scale.set(0.3, 0.3, 0.3)
    lootPile.position.set(0, 0.15, 0)
    lootPile.material.color = 'gold'
    
    const lootAction = app.create('action')
    lootAction.label = 'Take loot'
    lootAction.distance = 2
    lootAction.onTrigger = (player) => {
      let totalCoins = 0
      for (const drop of drops) {
        totalCoins += drop.quantity
      }
      world.chat.send(`You collected ${totalCoins} coins!`)
      app.remove(lootPile)
    }
    
    lootPile.add(lootAction)
    app.add(lootPile)
    
    // Remove loot after 2 minutes
    setTimeout(() => {
      app.remove(lootPile)
    }, 120000)
  }
}

function handleDeath() {
  banditStats.isDead = true
  banditStats.inCombat = false
  
  world.chat.send(`${banditStats.name} has been defeated!`)
  
  // Hide the bandit
  banditMesh.visible = false
  nameTag.visible = false
  healthBarBg.visible = false
  
  // Drop loot
  dropLoot()
  
  // Respawn after delay
  setTimeout(() => {
    banditStats.hitpoints.current = banditStats.hitpoints.max
    banditStats.isDead = false
    banditMesh.visible = true
    nameTag.visible = true
    healthBarBg.visible = true
    
    // Reset health bar
    healthBarFill.width = 56
    healthBarFill.backgroundColor = 'red'
    
    world.chat.send(`A new ${banditStats.name} has appeared!`)
  }, banditStats.respawnTime)
}

// Basic AI behavior
let aiState = 'idle'
let wanderTarget = null
let aiUpdateInterval = setInterval(() => {
  if (banditStats.isDead) return
  
  switch (aiState) {
    case 'idle':
      // Chance to start wandering
      if (Math.random() < 0.1) {
        aiState = 'wandering'
        wanderTarget = {
          x: Math.random() * 10 - 5,
          z: Math.random() * 10 - 5
        }
      }
      break
      
    case 'wandering':
      // Simple movement toward target
      if (wanderTarget) {
        const distance = Math.sqrt(
          Math.pow(wanderTarget.x, 2) + Math.pow(wanderTarget.z, 2)
        )
        
        if (distance < 0.5) {
          aiState = 'idle'
          wanderTarget = null
        }
      }
      break
  }
}, 2000)

// Cleanup on destroy
app.on('destroy', () => {
  clearInterval(aiUpdateInterval)
})