{"blueprint":{"id":"RPGGeneralStore001","version":1,"name":"RPG General Store","author":"RPG System","url":null,"desc":"A general store selling tools and arrows","model":null,"script":null,"props":{"storeName":"General Store","visualColor":"green"},"preload":false,"public":true,"locked":false,"unique":false,"disabled":false},"assets":[]}

// RPG General Store App for Hyperfy
// General store with tools and arrows per the GDD

console.log('🏪 Initializing RPG General Store Hyperfy App...');

app.configure([
  {
    key: 'storeName',
    type: 'text',
    label: 'Store Name',
    initial: 'General Store',
    hint: 'The name of the store'
  },
  {
    key: 'visualColor',
    type: 'text',
    label: 'Visual Color',
    initial: 'green',
    hint: 'Color of the store representation'
  }
])

// Store inventory - items available per GDD
const storeInventory = {
  // Tools
  70: { name: 'Hatchet (Bronze)', price: 50, stock: 'unlimited' },
  71: { name: 'Fishing Rod', price: 25, stock: 'unlimited' },
  72: { name: 'Tinderbox', price: 10, stock: 'unlimited' },
  
  // Arrows
  20: { name: 'Arrow', price: 2, stock: 'unlimited' },
  
  // Basic supplies
  995: { name: 'Coin Pouch (for change)', price: 0, stock: 'unlimited' }
}

// Create store visual representation
const storeMesh = app.create('mesh')
storeMesh.geometry = 'box'
storeMesh.scale.set(2, 2.5, 2)
storeMesh.position.set(0, 1.25, 0)
storeMesh.material.color = props.visualColor
storeMesh.castShadow = true

// Create store sign
const storeSign = app.create('ui', {
  text: props.storeName,
  fontSize: 18,
  color: 'white',
  backgroundColor: 'rgba(0,0,0,0.8)',
  padding: 6,
  borderRadius: 4
})
storeSign.position.set(0, 3, 0)
storeSign.billboard = true

// Create "OPEN" sign
const openSign = app.create('ui', {
  text: 'OPEN',
  fontSize: 12,
  color: 'green',
  backgroundColor: 'rgba(0,0,0,0.8)',
  padding: 4,
  borderRadius: 4
})
openSign.position.set(0, 2.5, 0)
openSign.billboard = true

// Add to app
app.add(storeMesh)
app.add(storeSign)
app.add(openSign)

// Create shopping actions
const shopAction = app.create('action')
shopAction.label = 'Browse Store'
shopAction.distance = 3
shopAction.onTrigger = (player) => {
  world.chat.send(`Welcome to ${props.storeName}!`)
  world.chat.send('📦 Available Items:')
  
  for (const [itemId, item] of Object.entries(storeInventory)) {
    if (itemId !== '995') { // Don't show coin pouch
      world.chat.send(`• ${item.name} - ${item.price} coins`)
    }
  }
  
  world.chat.send('Use "Buy [item]" actions to purchase items')
}

storeMesh.add(shopAction)

// Create individual buy actions for each item
const buyHatchetAction = app.create('action')
buyHatchetAction.label = 'Buy Hatchet (50 coins)'
buyHatchetAction.distance = 3
buyHatchetAction.onTrigger = (player) => {
  // In a full implementation, this would check player coins and inventory
  world.chat.send('You purchased a Bronze Hatchet for 50 coins!')
  world.chat.send('🪓 Use this tool for woodcutting')
}

const buyFishingRodAction = app.create('action')
buyFishingRodAction.label = 'Buy Fishing Rod (25 coins)'
buyFishingRodAction.distance = 3
buyFishingRodAction.onTrigger = (player) => {
  world.chat.send('You purchased a Fishing Rod for 25 coins!')
  world.chat.send('🎣 Use this tool for fishing')
}

const buyTinderboxAction = app.create('action')
buyTinderboxAction.label = 'Buy Tinderbox (10 coins)'
buyTinderboxAction.distance = 3
buyTinderboxAction.onTrigger = (player) => {
  world.chat.send('You purchased a Tinderbox for 10 coins!')
  world.chat.send('🔥 Use this tool for firemaking')
}

const buyArrowsAction = app.create('action')
buyArrowsAction.label = 'Buy Arrows (2 coins each)'
buyArrowsAction.distance = 3
buyArrowsAction.onTrigger = (player) => {
  world.chat.send('You purchased 10 Arrows for 20 coins!')
  world.chat.send('🏹 Required ammunition for bow usage')
}

const storeInfoAction = app.create('action')
storeInfoAction.label = 'Store Info'
storeInfoAction.distance = 4
storeInfoAction.onTrigger = (player) => {
  world.chat.send('🏪 General Store Information:')
  world.chat.send('• All tools available: Hatchet, Fishing Rod, Tinderbox')
  world.chat.send('• Arrows for ranged combat')
  world.chat.send('• Unlimited stock')
  world.chat.send('• Located in starter towns')
}

// Add all actions to the store
storeMesh.add(buyHatchetAction)
storeMesh.add(buyFishingRodAction)
storeMesh.add(buyTinderboxAction)
storeMesh.add(buyArrowsAction)
storeMesh.add(storeInfoAction)

// Store API functions that other apps can use
app.buyItem = (playerId, itemId, quantity = 1) => {
  const item = storeInventory[itemId]
  if (!item) return { success: false, message: 'Item not available' }
  
  const totalCost = item.price * quantity
  // In a full implementation, this would check/deduct player coins
  
  return { 
    success: true, 
    message: `Purchased ${quantity} ${item.name} for ${totalCost} coins`,
    itemId,
    quantity,
    cost: totalCost
  }
}

app.getStoreInventory = () => {
  return storeInventory
}

app.getItemPrice = (itemId) => {
  const item = storeInventory[itemId]
  return item ? item.price : null
}

// Display store info
world.chat.send(`🏪 ${props.storeName} is now open for business!`)
world.chat.send('Tools & Arrows available: Hatchet, Fishing Rod, Tinderbox, Arrows')