---
alwaysApply: false
---
# Important rules for development and testing

## Fail fast

We NEVER want to hide our bugs. No if ('property' in obj) -- if obj.property fails typecheck, then we're using it wrong. If obj.property fails because its unknown, then add a throw so when we run it we see the error response

## Don't ignore errors -- use patterns to throw if data is not what we expect

The goal of our testing and development *is to catch bugs* and the best way to do that is at runtime, when running through actual user behaviors. Make sure that if the data we expect is not right, we throw or error. We never use try catch, we never do null checks on data we critically need.

## The goal of tests is to find bugs

Don't make useless tests. Don't make tests that count the number of services in the plugin. Make tests that find bugs in the runtime objects. We don't use mocks or unit test patterns with fake code, everything we do uses REAL code.

## No unit testing library and no mocks

Your tendency is to make a lot of bad unit tests that don't really test anything. So you are banned from using any unit testing library. Instead, you must create scenarios using e2e testing tools like the built-in elizaos plugin test suite tools for plugins ('elizaos test' will run all the tests in the plugin 'tests' property) and Cypress for testing applications.

## Always do e2e tests with real objects

We can only know if the code works if we actually run through the real thing end to end

## Always upgrade the existing tests and only add new tests when there are new features

We don't want quick tests, simple tests, one-offs or scripts. Always focus on making the current tests pass and improving them. Don't create new files unless there are new features. There should NEVER be more test files than there are features.

## Always run all tests

Don't just run some tests and think you are done. If all tests don't pass, the feature is not implemented. Always run ALL tests. Always make sure all tests are enabled and run from the "test" npm script. Features are only implemented when all tests pass.

## Never disable tests

If tests fail, fix them. This is your priority. DO NOT disable tests.

## TL;DR

No defensive programming -- actively find and throw errors
No unit testing library, no mocks, no "test" code -- everything should use a live runtime environment with setups where we can observe errors
No useless tests -- Don't make tests that don't test anything
Don't create new test scripts -- improve the ones you have
Fix tests-- this is your biggest priority, don't ignore and don't disable them
Always run all tests-- if all tests dont pass, the feature isn't properly implemented